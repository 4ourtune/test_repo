name: Integration Test

on:
  # release 브랜치로의 모든 PR (develop → release 포함)
  pull_request:
    branches: [ release, release/* ]
    types: [opened, synchronize, reopened]
  
  # release 브랜치에 직접 push (병합 완료 후)
  push:
    branches: [ release, release/* ]

jobs:
  dynamic-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: 'latest'
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        vsversion: 2022
    
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v4
    
    - name: Configure CMake for integration tests
      working-directory: test
      run: |
        # FetchContent가 GoogleTest를 자동으로 다운로드할 것입니다
        cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release
    
    - name: Build integration tests
      working-directory: test
      run: |
        cmake --build build --config Release
    
    - name: Run full integration test suite
      working-directory: test
      run: |
        # 빌드가 성공했는지 확인
        if (Test-Path "build\test_runner.exe") {
          Write-Host "Test runner found, executing all integration tests..."
          
          # 모든 테스트 실행 (test 폴더의 모든 테스트)
          .\build\test_runner.exe --gtest_output=xml:integration_test_results.xml
          
          Write-Host "Integration tests completed"
        } else {
          Write-Host "Test runner not found - build failed"
          # 빈 XML 파일 생성
          '<?xml version="1.0" encoding="UTF-8"?><testsuites><testsuite name="BuildFailure" tests="0" failures="1"><testcase name="BuildFailed" classname="BuildError"><failure message="Build failed"/></testcase></testsuite></testsuites>' | Out-File -FilePath "integration_test_results.xml"
        }
    
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: test/integration_test_results.xml
    
    - name: Display integration test summary
      if: always()
      working-directory: test
      run: |
        if (Test-Path "integration_test_results.xml") {
          $xmlContent = Get-Content "integration_test_results.xml" -Raw
          
          # XML에서 기본 정보 추출
          if ($xmlContent -match '<testsuite[^>]*tests="(\d+)"[^>]*failures="(\d+)"[^>]*errors="(\d+)"') {
            $totalTests = $matches[1]
            $failures = $matches[2]
            $errors = $matches[3]
            $passed = [int]$totalTests - [int]$failures - [int]$errors
            
            "### Integration Test Results:" | Add-Content $env:GITHUB_STEP_SUMMARY
            "**Total Tests: $totalTests**" | Add-Content $env:GITHUB_STEP_SUMMARY
            "" | Add-Content $env:GITHUB_STEP_SUMMARY
            "- Passed: $passed" | Add-Content $env:GITHUB_STEP_SUMMARY
            "- Failed: $failures" | Add-Content $env:GITHUB_STEP_SUMMARY
            "- Errors: $errors" | Add-Content $env:GITHUB_STEP_SUMMARY
          } else {
            "### Integration Test Results:" | Add-Content $env:GITHUB_STEP_SUMMARY
            "**Status: Build Failed or No Tests**" | Add-Content $env:GITHUB_STEP_SUMMARY
          }
        } else {
          "### Integration Test Results:" | Add-Content $env:GITHUB_STEP_SUMMARY
          "**Status: No test results file generated**" | Add-Content $env:GITHUB_STEP_SUMMARY
        }

  static-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for src and include directories
      id: check_dirs
      run: |
        HAS_SOURCE_FILES="false"
        
        # src 폴더에서 C/C++ 소스 파일 찾기
        if [ -d "src" ]; then
          SRC_FILES=$(find src -name "*.c" -o -name "*.cpp" 2>/dev/null || true)
          if [ -n "$SRC_FILES" ]; then
            HAS_SOURCE_FILES="true"
            echo "Found source files in src directory"
          fi
        fi
        
        # include 폴더에서 헤더 파일 찾기 (정적 분석 대상)
        if [ -d "include" ]; then
          HEADER_FILES=$(find include -name "*.h" -o -name "*.hpp" 2>/dev/null || true)
          if [ -n "$HEADER_FILES" ]; then
            HAS_SOURCE_FILES="true"
            echo "Found header files in include directory"
          fi
        fi
        
        echo "has_source_files=$HAS_SOURCE_FILES" >> $GITHUB_OUTPUT
        
        if [ "$HAS_SOURCE_FILES" = "false" ]; then
          echo "No C/C++ files found in src or include directories"
        fi
    
    - name: Install cppcheck
      if: steps.check_dirs.outputs.has_source_files == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    - name: Run comprehensive cppcheck analysis on src and include
      if: steps.check_dirs.outputs.has_source_files == 'true'
      run: |
        echo "=== Running comprehensive static analysis ==="
        
        # src와 include 폴더에서 모든 C/C++ 파일 찾기
        ALL_FILES=""
        if [ "${{ steps.check_dirs.outputs.has_src }}" = "true" ]; then
          SRC_FILES=$(find src -name "*.c" -o -name "*.cpp" 2>/dev/null || true)
          if [ -n "$SRC_FILES" ]; then
            ALL_FILES="$ALL_FILES$SRC_FILES"
            echo "Source files in src/:"
            echo "$SRC_FILES"
          fi
        fi
        
        if [ "${{ steps.check_dirs.outputs.has_include }}" = "true" ]; then
          INCLUDE_FILES=$(find include -name "*.c" -o -name "*.cpp" 2>/dev/null || true)
          if [ -n "$INCLUDE_FILES" ]; then
            if [ -n "$ALL_FILES" ]; then
              ALL_FILES="$ALL_FILES$INCLUDE_FILES"
            else
              ALL_FILES="$INCLUDE_FILES"
            fi
            echo "Source files in include/:"
            echo "$INCLUDE_FILES"
          fi
        fi
        
        if [ -n "$ALL_FILES" ]; then
          echo "=== All files to analyze ==="
          echo "$ALL_FILES"
          echo "============================"
          
          # XML 헤더 생성
          printf '<?xml version="1.0" encoding="UTF-8"?>\n' > cppcheck_results.xml
          printf '<results version="2">\n' >> cppcheck_results.xml
          printf '<cppcheck version=""/>\n' >> cppcheck_results.xml
          printf '<errors>\n' >> cppcheck_results.xml
          
          # 각 파일에 대해 cppcheck 실행
          echo "$ALL_FILES" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Comprehensive checking: $file"
              cppcheck --enable=all --xml --xml-version=2 \
                --suppress=missingIncludeSystem \
                --suppress=unmatchedSuppression \
                --suppress=unusedFunction \
                --suppress=unusedStructMember \
                --inconclusive \
                "$file" 2>> temp_cppcheck.xml || true
            fi
          done
          
          # 결과 병합
          if [ -f temp_cppcheck.xml ]; then
            grep '<error' temp_cppcheck.xml >> cppcheck_results.xml || true
            rm temp_cppcheck.xml
          fi
          
          # XML 마무리
          printf '</errors>\n' >> cppcheck_results.xml
          printf '</results>\n' >> cppcheck_results.xml
        else
          echo "No C/C++ files found"
          printf '<?xml version="1.0" encoding="UTF-8"?>\n<results version="2">\n<cppcheck version=""/>\n<errors>\n</errors>\n</results>\n' > cppcheck_results.xml
        fi
    
    - name: Skip static analysis notification
      if: steps.check_dirs.outputs.has_source_files == 'false'
      run: |
        echo "No C/C++ files found in src or include directories. Skipping static analysis."
    
    - name: Upload comprehensive cppcheck results
      if: steps.check_dirs.outputs.has_source_files == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: integration-cppcheck-report
        path: cppcheck_results.xml
    
    - name: Display comprehensive cppcheck summary
      if: steps.check_dirs.outputs.has_source_files == 'true'
      run: |
        if [ -s cppcheck_results.xml ]; then
          ISSUE_COUNT=$(grep -c '<error' cppcheck_results.xml || echo "0")
          if [ "$ISSUE_COUNT" -gt 0 ]; then
            echo "### Comprehensive Cppcheck Issues Found:" >> $GITHUB_STEP_SUMMARY
            echo "**Total Issues: $ISSUE_COUNT**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Severity Breakdown:**" >> $GITHUB_STEP_SUMMARY
            grep -o 'severity="[^"]*"' cppcheck_results.xml | sort | uniq -c | while read count severity; do
              echo "- ${severity}: ${count}" >> $GITHUB_STEP_SUMMARY
            done || echo "- Issues found but categorization failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Review the uploaded artifact for detailed analysis." >> $GITHUB_STEP_SUMMARY
          else
            echo "### No cppcheck issues found in release candidate!" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### No cppcheck issues found in release candidate!" >> $GITHUB_STEP_SUMMARY
        fi